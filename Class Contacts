public with sharing class Contacts {
    
     public static List<Contact> createMembers(String firstName, String lastName) {
        List<Contact> members = new List<Contact>();
        
        List<String> lastNames = new List<String>(getFamilies(lastName));
        List<Account> accs = [SELECT Id FROM Account WHERE Name IN :lastNames]; 
       
        List<String> firstNames = new List<String>(getFirstName(firstName));
        List<Account> existingFirstName = [SELECT Id FROM Account WHERE Name IN :firstNames];        
   
    // Inicializa a lista de contas vazia, caso não haja nenhuma correspondente às famílias, adicione !
        if(accs.isEmpty()) {
         accs = new List<Account>();
          for (String ln : lastNames) {
           Account newAcc = new Account(Name = ln);
            accs.add(newAcc);
  }     
         insert accs;
}   // Se houver menos contas do que sobrenomes, cria novas contas com os sobrenomes faltantes
        else if(lastNames.size() != accs.size()) {
         List<String> existingLastNames = new List<String>();
          for (Account acc : accs) {
           existingLastNames.add(acc.Name);
}
        accs = new List<Account>();
         for (String ln : lastNames) {
    // Se o sobrenome não estiver presente nas contas existentes, cria uma nova conta com o sobrenome especificado
          if (!existingLastNames.contains(ln)) {
           Account newAcc = new Account(Name = ln);
            accs.add(newAcc);
   }
}      
        insert accs; 
        accs.addAll(accs);        
}    
    // cria novos registros de Conta para cada primeiro nome fornecido, somente se não existir um registro de Conta correspondente com o mesmo primeiro nome.
        if(existingFirstName.isEmpty()) {
         existingFirstName = new List<Account>();
          for (String fn : firstNames) {
           Account newFirstName = new Account(Name = fn);
            existingFirstName.add(newFirstName);
   }
        insert existingFirstName; 
} 
         for(Account acc : accs) {
          members.add(new Contact(FirstName = firstName, LastName = lastName, AccountId = acc.Id));
        }
       return members;
}
    private static List<String> getFamilies(String lastName) {
        List<String> families = new List<String>();
        List<String> lastNames = lastName.split(' ');
        Integer lastNamesQuantity = lastNames.size();
        
        for (Integer i = 0; i < lastNamesQuantity; i++) {
         families.addAll(buildLastNames(lastNames, lastNamesQuantity, i));
       }
        return families;
}     
      private static List<String> getFirstName(String firstName) {
        List<String> existingNames = new List<String>();
        List<String> ListfirstName = firstName.split(' ');
        Set<String> firstNamesSet = new Set<String>(ListfirstName);
        List<Contact> firstNames = [SELECT FirstName FROM Contact WHERE FirstName IN :firstNamesSet];

        for (Contact fn : firstNames) {
         existingNames.add(fn.firstName);
   }
        return existingNames;
}  
    public static List<String> buildLastNames(List<String> lastNames, Integer lastNamesQuantity, Integer startingIndex) {
        List<String> lastNameTemp = new List<String>();
        String currentLastName = '';
        
        for (Integer j = startingIndex; j < lastNamesQuantity; j++) {
         if (j > startingIndex) {
          currentLastName += ' ';
 }
          currentLastName += lastNames[j];
          lastNameTemp.add(currentLastName);
        }
     return lastNameTemp;
   }
}
